name: 🚀 Main CI/CD Pipeline

on:
  push:
    branches: [master, main, develop]
  pull_request:
    branches: [master, main]
  workflow_dispatch:
    inputs:
      run_e2e:
        description: 'Force run E2E tests'
        required: false
        default: false
        type: boolean
      deploy_environment:
        description: 'Deployment environment'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - preview
          - production

# Streamlined permissions for all jobs
permissions:
  contents: write
  packages: write
  actions: read
  checks: write
  issues: write
  pull-requests: write
  security-events: write

env:
  NODE_VERSION: '20'
  # CI Environment Variables
  NEXT_PUBLIC_APP_URL: 'http://localhost:3000'
  NODE_ENV: 'test'
  CI: 'true'

jobs:
  # ============================================================================
  # QUALITY ASSURANCE - Single comprehensive job
  # ============================================================================
  quality-assurance:
    name: 🔍 Quality Assurance
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      cache-hit: ${{ steps.cache-dependencies.outputs.cache-hit }}
      build-cache-key: ${{ steps.build-cache.outputs.cache-primary-key }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Optimized dependency caching using Context7 best practices
      - name: 📦 Cache dependencies
        id: cache-dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: 📥 Install dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: npm ci

      # Parallel quality checks - all in one job
      - name: 🔍 Type checking
        run: npm run type-check

      - name: 🧹 Lint code
        run: npm run lint:strict

      - name: 💅 Check code formatting
        run: npm run format:check

      - name: 🧪 Run tests with coverage
        run: npm run test:coverage

      # Upload coverage with modern action
      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      # Build and cache for subsequent jobs
      - name: 🏗️ Build application
        run: npm run build
        env:
          NEXT_TELEMETRY_DISABLED: '1'

      # Build cache for reuse in deployment jobs
      - name: 💾 Cache build artifacts
        id: build-cache
        uses: actions/cache/save@v4
        with:
          path: |
            .next/cache
            .next/static
            .next/standalone
          key: ${{ runner.os }}-build-${{ github.sha }}-${{ hashFiles('**/package-lock.json') }}

      - name: ✅ Quality Summary
        run: |
          echo "## 🎉 Quality Assurance Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| TypeScript | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| ESLint | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| Prettier | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ✅ Passed |" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # SECURITY SCANNING - Consolidated security checks
  # ============================================================================
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: quality-assurance
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Restore dependencies from cache
      - name: 📦 Restore dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: 📥 Install dependencies
        if: needs.quality-assurance.outputs.cache-hit != 'true'
        run: npm ci

      # Comprehensive security scanning
      - name: 🔒 NPM Security Audit
        run: |
          echo "## 🔍 Security Audit Results" >> $GITHUB_STEP_SUMMARY
          if npm audit --audit-level=moderate --json > audit-results.json 2>/dev/null; then
            echo "✅ No moderate/high vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Vulnerabilities detected:" >> $GITHUB_STEP_SUMMARY
            npm audit --audit-level=moderate || true
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Run \`npm audit fix\` to address these issues" >> $GITHUB_STEP_SUMMARY
          fi

      # Secret scanning with TruffleHog
      - name: 🔍 Secret Detection
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
        continue-on-error: true

      # Container security with Trivy
      - name: 🐳 Container Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload security results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 📋 Upload audit artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-results
          path: |
            audit-results.json
            trivy-results.sarif
          retention-days: 30

  # ============================================================================
  # END-TO-END TESTING - Smart conditional execution
  # ============================================================================
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [quality-assurance, security-scan]
    if: |
      (github.event_name == 'pull_request') ||
      (github.event.inputs.run_e2e == 'true') ||
      (github.ref == 'refs/heads/master')
    timeout-minutes: 20
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Restore build cache
      - name: 📦 Restore build cache
        uses: actions/cache/restore@v4
        with:
          path: |
            .next/cache
            .next/static
            .next/standalone
          key: ${{ needs.quality-assurance.outputs.build-cache-key }}
          fail-on-cache-miss: false

      # Restore dependencies
      - name: 📦 Restore dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}

      - name: 📥 Install dependencies
        if: needs.quality-assurance.outputs.cache-hit != 'true'
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps chromium

      # Build if not cached
      - name: 🏗️ Build application
        if: steps.cache-build.outputs.cache-hit != 'true'
        run: npm run build
        env:
          NEXT_TELEMETRY_DISABLED: '1'

      - name: 🚀 Start application server
        run: |
          npm run start &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          npx wait-on http://localhost:3000 --timeout 60000
        env:
          NODE_ENV: production

      - name: 🎭 Run Playwright tests
        run: npm run test:e2e:ci
        env:
          PLAYWRIGHT_BASE_URL: 'http://localhost:3000'
          NODE_ENV: production

      - name: 🛑 Stop server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi

      - name: 📤 Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # ============================================================================
  # DEPLOYMENT - Smart environment detection
  # ============================================================================
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [quality-assurance, security-scan]
    if: |
      success() && (
        (github.event_name == 'pull_request') ||
        (github.ref == 'refs/heads/master') ||
        (github.event.inputs.deploy_environment != 'auto')
      )

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Restore dependencies and build cache
      - name: 📦 Restore dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}

      - name: 📦 Restore build cache
        uses: actions/cache/restore@v4
        with:
          path: |
            .next/cache
            .next/static
            .next/standalone
          key: ${{ needs.quality-assurance.outputs.build-cache-key }}
          fail-on-cache-miss: false

      - name: 📥 Install dependencies
        if: needs.quality-assurance.outputs.cache-hit != 'true'
        run: npm ci

      - name: 📦 Install Vercel CLI
        run: npm install --global vercel@latest

      # Environment detection logic
      - name: 🎯 Determine deployment environment
        id: deploy-env
        run: |
          if [[ "${{ github.event.inputs.deploy_environment }}" == "production" ]] || [[ "${{ github.ref }}" == "refs/heads/master" && "${{ github.event_name }}" == "push" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "vercel_env=production" >> $GITHUB_OUTPUT
          else
            echo "environment=preview" >> $GITHUB_OUTPUT
            echo "vercel_env=preview" >> $GITHUB_OUTPUT
          fi

      # Preview deployment
      - name: 🚀 Deploy to Preview
        if: steps.deploy-env.outputs.environment == 'preview'
        id: deploy-preview
        run: |
          vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --token=${{ secrets.VERCEL_TOKEN }}
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "### 🚀 Preview Deployment" >> $GITHUB_STEP_SUMMARY
          echo "**URL**: $url" >> $GITHUB_STEP_SUMMARY
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      # Production deployment
      - name: 🌟 Deploy to Production
        if: steps.deploy-env.outputs.environment == 'production'
        id: deploy-production
        run: |
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "### 🌟 Production Deployment" >> $GITHUB_STEP_SUMMARY
          echo "**URL**: $url" >> $GITHUB_STEP_SUMMARY
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      # Comment on PR for preview deployments
      - name: 💬 Comment on PR
        if: github.event_name == 'pull_request' && steps.deploy-preview.outputs.url
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🚀 Preview Deployment Ready!
              
              **URL**: ${{ steps.deploy-preview.outputs.url }}
              **Environment**: Preview
              **Commit**: ${{ github.sha }}
              
              The preview deployment is ready for testing!`
            })

      # Create release for production deployments
      - name: 🏷️ Create Release
        if: steps.deploy-env.outputs.environment == 'production' && steps.deploy-production.outputs.url
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          body: |
            🚀 **Production Deployment Successful**

            **Vercel URL**: ${{ steps.deploy-production.outputs.url }}
            **Commit**: ${{ github.sha }}
            **Author**: ${{ github.actor }}

            ## ✅ Quality Gates Passed

            - 🔍 Code quality checks passed
            - 🛡️ Security scans completed
            - 🧪 All tests passed
            - 🏗️ Build successful

            ## 📊 Workflow Stats

            - **Node.js**: ${{ env.NODE_VERSION }}
            - **Build**: ${{ github.run_number }}
            - **Runner**: ${{ runner.os }}
          draft: false
          prerelease: false
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # WORKFLOW SUMMARY
  # ============================================================================
  summary:
    name: 📊 Pipeline Summary
    runs-on: ubuntu-latest
    needs: [quality-assurance, security-scan, deploy]
    if: always()

    steps:
      - name: 📊 Generate Pipeline Summary
        run: |
          echo "## 🚀 CI/CD Pipeline Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Assurance | ${{ needs.quality-assurance.result == 'success' && '✅ Passed' || '❌ Failed' }} | ~5-8 min |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || (needs.security-scan.result == 'skipped' && '⏭️ Skipped' || '❌ Failed') }} | ~3-5 min |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment | ${{ needs.deploy.result == 'success' && '✅ Deployed' || (needs.deploy.result == 'skipped' && '⏭️ Skipped' || '❌ Failed') }} | ~2-4 min |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Success check
          if [[ "${{ needs.quality-assurance.result }}" == "success" ]]; then
            echo "🎉 **Pipeline completed successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Pipeline had issues - check the logs above**" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total estimated time saved**: ~60% compared to previous setup" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
