name: Quality Gates

on:
  push:
    branches: [master, main, develop]
  pull_request:
    branches: [master, main]
  workflow_dispatch:
    inputs:
      run_full_suite:
        description: 'Run full quality gates suite'
        required: false
        default: 'true'
        type: boolean

env:
  NODE_VERSION: '20'
  COVERAGE_THRESHOLD: 80
  # CI Environment Variables
  NEXT_PUBLIC_APP_URL: 'http://localhost:3000'
  NODE_ENV: 'test'
  CI: 'true'

jobs:
  # Core quality checks - fast feedback loop
  code-quality-tests:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npm run type-check

      - name: Lint code
        run: npm run lint:strict

      - name: Check code formatting
        run: npm run format:check

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        if: always()
        with:
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Build application
        run: npm run build

  # Matrix testing across environments
  quality-gates-matrix:
    name: Quality Gates Matrix (${{ matrix.os }}, Node ${{ matrix.node-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18, 20]
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run core quality checks
        run: |
          npm run type-check
          npm run lint:check
          npm run format:check
          npm run test:run
          npm run build

  # Security scanning - separate job to avoid conflicts
  security-quality-gates:
    name: Security Quality Gates
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: |
          npm audit --audit-level=moderate || true
          npm audit --audit-level=critical

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Performance testing for PRs only
  lighthouse-performance-gates:
    name: Lighthouse Performance Gates
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm start &
          npx wait-on http://localhost:3000 -t 30000

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v12
        with:
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Upload lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 7

  # Final verification and summary
  quality-gates-verification:
    name: Quality Gates Verification
    runs-on: ubuntu-latest
    needs: [code-quality-tests, quality-gates-matrix, security-quality-gates]
    if: always()

    steps:
      - name: Check all job results
        run: |
          echo "Checking quality gates results..."

          # Check code quality job
          if [[ "${{ needs.code-quality-tests.result }}" != "success" ]]; then
            echo "❌ Code quality and tests failed"
            exit 1
          fi

          # Check matrix jobs (allow some failures)
          if [[ "${{ needs.quality-gates-matrix.result }}" == "failure" ]]; then
            echo "⚠️ Some matrix builds failed - investigating..."
            # Don't fail the entire pipeline for matrix issues in non-critical environments
          fi

          # Check security (allow to continue with warnings)
          if [[ "${{ needs.security-quality-gates.result }}" == "failure" ]]; then
            echo "⚠️ Security checks had issues - manual review required"
          fi

          echo "✅ Essential quality gates passed"

      - name: Generate summary
        run: |
          echo "## 📊 Quality Gates Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Category | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Type Checking | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Linting | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Formatting | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Process | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 Core quality gates passed successfully!" >> $GITHUB_STEP_SUMMARY

      - name: Archive quality reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-reports
          path: |
            coverage/
          retention-days: 7
          if-no-files-found: warn
