name: CI/CD Pipeline

on:
  push:
    branches: [master, main, develop]
  pull_request:
    branches: [master, main]

# CRITICAL: These permissions fix the "Resource not accessible by integration" error
permissions:
  contents: write    # Required for creating releases and tags
  packages: write    # For publishing packages
  actions: read      # Standard permission
  checks: write      # For check runs
  issues: write      # For issue comments
  pull-requests: write # For PR comments
  security-events: write # For security scanning

env:
  NODE_VERSION: '20'
  # CI Environment Variables
  NEXT_PUBLIC_APP_URL: 'http://localhost:3000'
  NODE_ENV: 'test'
  CI: 'true'

jobs:
  quality-checks:
    name: Code Quality & Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npm run type-check

      - name: Lint code
        run: npm run lint:strict

      - name: Check code formatting
        run: npm run format:check

      - name: Run unit tests
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Build project
        run: npm run build

      - name: Cache build
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=critical || true

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          config-file: ./.github/codeql-config.yml

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Build project
        run: npm run build
        env:
          NEXT_TELEMETRY_DISABLED: '1'

      - name: Start development server
        run: |
          npm run start &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          npx wait-on http://localhost:3000 --timeout 30000 || exit 1
        env:
          CI: true
          NODE_ENV: production

      - name: Run Playwright tests
        run: npm run test:e2e:ci -- --reporter=list
        env:
          CI: true
          PLAYWRIGHT_BASE_URL: 'http://localhost:3000'
          NODE_ENV: production

      - name: Kill server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  deployment-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [quality-checks, e2e-tests]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy-preview
        run: |
          url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "### 🚀 Preview Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "**URL**: $url" >> $GITHUB_STEP_SUMMARY

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🚀 Preview Deployment Ready!
              
              **URL**: ${{ steps.deploy-preview.outputs.url }}
              **Environment**: Preview
              **Commit**: ${{ github.sha }}
              
              The preview deployment is ready for testing!`
            })

  production-deploy:
    name: Production Deployment
    runs-on: ubuntu-latest
    needs: [quality-checks, e2e-tests, security-scan]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}

      # MODERNIZED: Using environment files instead of deprecated set-output
      - name: Deploy Project Artifacts to Vercel
        id: deploy-production
        run: |
          url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$url" >> $GITHUB_OUTPUT
          echo "### 🚀 Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "**URL**: $url" >> $GITHUB_STEP_SUMMARY

      # MODERNIZED: Using softprops/action-gh-release@v2 instead of deprecated actions/create-release@v1
      - name: Create Release
        uses: softprops/action-gh-release@v2
        if: steps.deploy-production.outcome == 'success'
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          body: |
            🚀 **Production Deployment Successful**

            **Vercel URL**: ${{ steps.deploy-production.outputs.url }}

            **Changes in this release:**
            ${{ github.event.head_commit.message }}

            **Commit**: ${{ github.sha }}
            **Author**: ${{ github.actor }}
            
            ## What's Changed
            
            - ✅ All security scans passed
            - ✅ Code quality checks passed  
            - ✅ End-to-end tests passed
            - ✅ Successfully deployed to production
            
            ## Technical Details
            
            - **Node.js Version**: ${{ env.NODE_VERSION }}
            - **Build**: ${{ github.run_number }}
            - **Workflow**: ${{ github.workflow }}
            - **Runner**: ${{ runner.os }}
          draft: false
          prerelease: false
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Deployment Summary
        run: |
          echo "## 🚀 Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Status**: Successfully deployed to production" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **URL**: ${{ steps.deploy-production.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "🏷️ **Release**: v${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "🔐 **Security**: CodeQL analysis completed" >> $GITHUB_STEP_SUMMARY
          echo "🧪 **Tests**: All quality gates passed" >> $GITHUB_STEP_SUMMARY
