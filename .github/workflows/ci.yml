name: CI/CD Pipeline

on:
  push:
    branches: [master, main, develop]
  pull_request:
    branches: [master, main]

env:
  NODE_VERSION: '20'
  # CI Environment Variables
  NEXT_PUBLIC_APP_URL: 'http://localhost:3000'
  NODE_ENV: 'test'
  CI: 'true'

jobs:
  quality-checks:
    name: Code Quality & Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npm run type-check

      - name: Lint code
        run: npm run lint:strict

      - name: Check code formatting
        run: npm run format:check

      - name: Run unit tests
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Build project
        run: npm run build

      - name: Cache build
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=critical || true

      # Remove CodeQL since it conflicts with GitHub's default setup
      # Use npm audit instead for security scanning

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: quality-checks
    timeout-minutes: 10 # Reduced from 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Build project
        run: npm run build
        env:
          NEXT_TELEMETRY_DISABLED: '1'

      - name: Start development server
        run: |
          npm run start &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          npx wait-on http://localhost:3000 --timeout 30000 || exit 1
        env:
          CI: true
          NODE_ENV: production

      - name: Run Playwright tests
        run: npm run test:e2e:ci -- --reporter=list
        env:
          CI: true
          PLAYWRIGHT_BASE_URL: 'http://localhost:3000'
          NODE_ENV: production

      - name: Kill server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  deployment-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [quality-checks, e2e-tests]
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Deploy to Vercel Preview
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          github-comment: true
          # Remove --prebuilt and let Vercel handle the build

  production-deploy:
    name: Production Deployment
    runs-on: ubuntu-latest
    needs: [quality-checks, e2e-tests, security-scan]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Deploy to Vercel Production
        id: vercel-deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          github-comment: false
          # Let Vercel handle the build process

      - name: Create Release
        uses: actions/create-release@v1
        if: steps.vercel-deploy.outcome == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            🚀 **Production Deployment Successful**

            **Vercel URL**: ${{ steps.vercel-deploy.outputs.preview-url }}

            **Changes in this release:**
            ${{ github.event.head_commit.message }}

            **Commit**: ${{ github.sha }}
            **Author**: ${{ github.actor }}
          draft: false
          prerelease: false

      - name: Deployment Summary
        run: |
          echo "## 🚀 Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Status**: Successfully deployed to production" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **URL**: ${{ steps.vercel-deploy.outputs.preview-url }}" >> $GITHUB_STEP_SUMMARY
          echo "🏷️ **Release**: v${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
