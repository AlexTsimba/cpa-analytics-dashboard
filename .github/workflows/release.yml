name: 🏷️ Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: 🚀 Create Release
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run full test suite
        run: |
          npm run quality
          npm run test:coverage
          npm run build

      - name: 📝 Generate changelog
        id: changelog
        run: |
          # Get the tag name
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG_NAME="${{ github.event.inputs.version }}"
          else
            TAG_NAME="${{ github.ref_name }}"
          fi
          
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          
          # Generate changelog from commits
          echo "## 📋 Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "### Changes since $LAST_TAG:" >> CHANGELOG.md
            git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --reverse >> CHANGELOG.md
          else
            echo "### Initial Release:" >> CHANGELOG.md
            git log --pretty=format:"- %s (%h)" --reverse >> CHANGELOG.md
          fi
          
          echo "" >> CHANGELOG.md
          echo "## 📊 Statistics" >> CHANGELOG.md
          echo "- **Commits**: $(git rev-list --count HEAD)" >> CHANGELOG.md
          echo "- **Contributors**: $(git shortlog -sn | wc -l)" >> CHANGELOG.md
          echo "- **Files changed**: $(git diff --name-only $LAST_TAG..HEAD 2>/dev/null | wc -l || echo "N/A")" >> CHANGELOG.md

      - name: 📊 Generate release metrics
        run: |
          echo "## 📊 Release Metrics" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### Code Quality:" >> RELEASE_NOTES.md
          echo "- ✅ TypeScript: 0 errors" >> RELEASE_NOTES.md
          echo "- ✅ ESLint: 0 warnings/errors" >> RELEASE_NOTES.md
          echo "- ✅ Tests: $(npm test 2>/dev/null | grep -o '[0-9]* passing' || echo 'All passing')" >> RELEASE_NOTES.md
          echo "- ✅ Build: Successful" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "### Bundle Analysis:" >> RELEASE_NOTES.md
          du -h .next/static/chunks/*.js | head -5 >> RELEASE_NOTES.md || echo "Bundle analysis not available" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          cat CHANGELOG.md >> RELEASE_NOTES.md

      - name: 🏷️ Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.changelog.outputs.tag_name }}
          release_name: Release ${{ steps.changelog.outputs.tag_name }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease || false }}

      - name: 📦 Build production assets
        run: |
          npm run build
          tar -czf cpa-dashboard-${{ steps.changelog.outputs.tag_name }}.tar.gz .next/

      - name: 📤 Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./cpa-dashboard-${{ steps.changelog.outputs.tag_name }}.tar.gz
          asset_name: cpa-dashboard-${{ steps.changelog.outputs.tag_name }}.tar.gz
          asset_content_type: application/gzip

      - name: 🚀 Deploy to production (if not prerelease)
        if: github.event.inputs.prerelease != 'true'
        run: |
          echo "🚀 Production deployment would be triggered here"
          echo "Tag: ${{ steps.changelog.outputs.tag_name }}"
          echo "This could trigger Vercel, AWS, or other deployment"

      - name: 📢 Post-release notifications
        run: |
          echo "## 🎉 Release ${{ steps.changelog.outputs.tag_name }} Published!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Release Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.changelog.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: ${{ github.event.inputs.prerelease == 'true' && 'Pre-release' || 'Stable Release' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build**: ✅ Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests**: ✅ All Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ steps.changelog.outputs.tag_name }})" >> $GITHUB_STEP_SUMMARY

  notify-team:
    name: 📢 Notify Team
    runs-on: ubuntu-latest
    needs: create-release
    if: success()

    steps:
      - name: 📢 Success notification
        run: |
          echo "✅ Release process completed successfully!"
          echo "🎉 CPA Analytics Dashboard ${{ needs.create-release.outputs.tag_name }} is now live!"
          # Here you could add Slack, Discord, or email notifications

  rollback:
    name: 🔄 Rollback on Failure
    runs-on: ubuntu-latest
    needs: create-release
    if: failure()

    steps:
      - name: 🚨 Rollback notification
        run: |
          echo "❌ Release process failed!"
          echo "🔄 Consider rolling back if deployment occurred"
          echo "📋 Check logs and fix issues before retrying"
          # Here you could add automatic rollback logic
