# üìä CPA Analytics Dashboard ‚Äî Product Requirements Document (PRD)

## üß± Product Overview

The **CPA Analytics Dashboard** is a modular web application designed to track and optimize performance metrics for CPA (Cost-Per-Acquisition) marketing campaigns. It empowers marketers, analysts, and product owners with real-time data on user behavior, conversions, ROI, and campaign quality through highly interactive charts, filters, and cohort tools.

> üß† All business logic is decoupled from UI and data sources. Data providers can be swapped (CSV files, Google Sheets, API, DB, etc.) without impacting the frontend or logic.

## ‚öôÔ∏è Architecture Overview

- **Frontend**: Next.js 15, React 19, TypeScript
- **UI**: Shadcn UI, Shadcn Charts, Lucide React icons
- **Validation**: Zod
- **State Management**: Zustand + XState (FSM-based UI)
- **Fetching Layer**: React Query with FSM states (idle, loading, success, error)
- **Data Providers**: Abstract contract-based architecture supporting CSV upload/processing
- **Theming**: Dark mode + Light mode depending on user preference
- **Responsiveness**: Mobile-first design

---

## üîÑ MCP-Driven Development Workflow & Quality Assurance

### üß© MCP Tool Integration Strategy

#### TaskMaster MCP - Project Management Core
- **Task Decomposition**: Automatic complexity analysis and subtask generation
- **Progress Tracking**: Real-time task status management and dependency validation
- **Project Structure**: Maintains coherent project organization and task relationships
- **Reporting**: Automated task completion reports with standardized format

#### Context7 MCP - Technology Research Hub
- **Pre-Development Research**: Mandatory documentation lookup before code generation
- **Best Practices Validation**: Current syntax and implementation patterns verification
- **Library Documentation**: Up-to-date API references and compatibility checks
- **Memory Updates**: Continuous knowledge base updates with latest practices

#### Desktop Commander - File System Operations
- **Efficient File Management**: Optimized file operations and directory management
- **Build Process Integration**: Automated build commands and script execution
- **Configuration Management**: Environment and configuration file handling

#### Browser MCP + Playwright - E2E Testing
- **Automated UI Testing**: Complete user workflow validation
- **Cross-Browser Testing**: Chrome, Firefox, Safari compatibility verification
- **Mobile Testing**: Responsive design validation across devices
- **Performance Testing**: Load times and interaction responsiveness

#### Knowledge Graph - Memory & Insights
- **Project Memory**: Persistent storage of decisions, patterns, and learnings
- **Relationship Mapping**: Complex dependency and component relationship tracking
- **Performance Analytics**: MCP effectiveness evaluation and optimization

#### Sequential Thinking - Complex Problem Solving
- **Architectural Decisions**: Multi-step reasoning for complex technical choices
- **Debugging Workflows**: Systematic problem-solving for challenging issues
- **Integration Planning**: Complex feature integration strategy development

### üìã Mandatory Development Rules

#### Rule 1: Context7 Pre-Research Protocol
**Before ANY code generation:**
1. Resolve library documentation via Context7 MCP
2. Verify current best practices and syntax patterns
3. Check for breaking changes or deprecations
4. Update project memory with findings
5. Apply current standards to implementation

#### Rule 2: Comprehensive Testing Requirements
**Every task MUST include:**
- **Vitest Unit Tests**: All functions, components, and utilities
- **Vitest Integration Tests**: Cross-component and service interactions
- **Playwright E2E Tests**: Complete user workflows and edge cases
- **Test Coverage**: Minimum 80% code coverage requirement
- **Performance Benchmarks**: Load time and interaction metrics

#### Rule 3: Sequential Test Execution Strategy
- **Unit Tests First**: Individual component and function validation
- **Integration Tests Second**: Service and component interaction validation
- **E2E Tests Final**: Complete user workflow validation
- **Cross-Feature Testing**: Major feature boundary testing when transitioning

#### Rule 4: Standardized Completion Reporting
**Required Report Format:**
```
üìã **Task X.X Completion Report**
‚úÖ **Features Implemented:**
  - Detailed feature list with technical specifications
  - Files created/modified with purpose explanation
  - Integration points and dependencies
üêõ **Bugfixes:**
  - Issues discovered and resolved
  - Root cause analysis
  - Prevention measures implemented
üß™ **Test Results:**
  - Unit test coverage and results
  - Integration test scenarios passed
  - E2E test workflows validated
  - Performance benchmarks achieved
üìö **Documentation Created:**
  - Technical documentation updates
  - API documentation changes
  - User guide modifications
**Next Steps:** Ready for [next-task] | Requires approval for [dependencies]
```

#### Rule 5: Git Workflow & Memory Updates
**After approval:**
1. Create semantic commit with standardized message format
2. Update Knowledge Graph with implementation insights
3. Record MCP effectiveness metrics
4. Update project documentation
5. Proceed to next task/feature

#### Rule 6: Continuous Memory & Documentation Updates
- **Real-time Memory Updates**: Record decisions, patterns, and learnings immediately
- **Documentation Synchronization**: Keep all docs current with implementation
- **Performance Tracking**: Monitor and record MCP tool effectiveness
- **Knowledge Sharing**: Update team knowledge base with insights

#### Rule 7: MCP Effectiveness Evaluation
**Continuous Assessment:**
- **Response Times**: Track MCP tool response performance
- **Accuracy Metrics**: Validate information quality and relevance
- **Integration Success**: Measure seamless workflow integration
- **Bottleneck Identification**: Identify and address workflow inefficiencies

### üß™ Testing Strategy Implementation

#### Unit Testing with Vitest
**Components:**
- Props validation and state management
- Event handling and user interactions
- Conditional rendering scenarios
- Error boundary behavior

**Utilities & Services:**
- Data transformation and validation functions
- Business logic calculations
- API service interactions
- State management operations

**Custom Hooks:**
- State lifecycle management
- Side effect handling
- Dependency injection scenarios
- Error states and recovery

#### Integration Testing with Vitest
**Cross-Component Integration:**
- Parent-child component communication
- State sharing between components
- Event propagation and handling
- Context provider functionality

**Service Integration:**
- Data provider interactions
- State management store operations
- API call chains and error handling
- Cache invalidation and updates

#### End-to-End Testing with Playwright
**User Workflow Testing:**
- Complete user journeys through application
- Multi-tab navigation and state persistence
- Filter application and data refresh cycles
- Export functionality and file downloads

**Performance & Compatibility:**
- Cross-browser testing (Chrome, Firefox, Safari)
- Mobile responsive design validation
- Load time and interaction performance
- Accessibility compliance verification

### üîß Quality Gates & Automation

#### Pre-Commit Quality Gates
- **TypeScript Compilation**: Zero errors in strict mode
- **ESLint Validation**: No warnings or errors
- **Prettier Formatting**: Consistent code style
- **Unit Test Execution**: All tests passing
- **Type Coverage**: Minimum type safety standards

#### Pre-Push Quality Gates
- **Full Test Suite**: Unit, integration, and E2E tests
- **Performance Benchmarks**: No regressions
- **Build Validation**: Successful production build
- **Documentation Updates**: Current and accurate docs

#### Continuous Integration
- **Automated Testing**: Full test suite on every push
- **Performance Monitoring**: Load time and interaction metrics
- **Security Scanning**: Dependency vulnerability checks
- **Code Quality Analysis**: Maintainability and complexity metrics

---

## üß† System Architecture

### 1. Data Layer

- Unified `DataProvider` interface
- Initial implementation: CSV file processing (report.csv + traffic_report.csv)
- Runtime validation with Zod schemas
- Caching strategy: React Query / SWR
- Future extensibility: Google Sheets, REST API, DB

### 2. Business Logic Layer

- Metric calculations (Cost2Dep, ROAS, conversions, etc.)
- Data aggregation & cohort analysis services
- Date-based filtering (FTD vs Registration date)
- Cross-file data joining (report + traffic data)
- FSM-compliant structure
- Preferred libraries: `d3-array`, `date-fns`, `lodash`

### 3. Presentation Layer

- Modular Shadcn UI components
- FSM logic for all async UI (idle/loading/success/error)
- Auto-refresh capabilities
- Progressive enhancement
- Charts: Shadcn Charts with custom theming

---

## üìã Data Structure Analysis

### Report.csv (1967 rows) - Player Data
**Key Fields:**
- Player ID, Original player ID
- Sign up date, First deposit date  
- Promo ID, Promo code
- Tag: os (Android/iOS/Windows), Tag: source, Tag: sub2
- Prequalified, Duplicate, Self-excluded, Disabled
- Currency (EUR), FTD count, FTD sum
- Deposits count, Deposits sum, Cashouts count, Cashouts sum
- Casino bets count, Casino Real NGR, Fixed per player

### Traffic Report.csv (404 rows) - Traffic Data
**Key Fields:**
- date, foreign_landing_id, os_family
- all_clicks, unique_clicks, registrations_count
- ftd_count, deposits_count
- cr, cftd, cd, rftd (conversion metrics)

### Data Relationships
- `Tag: sub2` ‚Üî `foreign_landing_id` (landing page mapping)
- `Tag: os` ‚Üî `os_family` (operating system)
- `Date` ‚Üî `date` (time dimension)

---

## üóÇÔ∏è Tabs & Views

### 1. Overview Tab
- KPI cards (FTD Count, CPA Cost, NGR, ROAS)
- Time-series line chart showing key metrics over time
- Toggleable metrics display
- Summary statistics

### 2. Analytics Tab
- Traffic breakdown by Source ‚Üí Sub2 ‚Üí OS
- Top performers table (by conversion rates, revenue)
- Detailed player analysis
- Export functionality (CSV/XLS)

### 3. Conversions Tab
- Conversion funnel: Clicks ‚Üí Registrations ‚Üí FTD ‚Üí Deposits
- Metrics: CR (V2R), CFTD (R2D), CD, RFTD
- Daily conversion breakdown
- 7-day moving average trends

### 4. Cohorts Tab
- Player retention analysis
- Grouping by Day/Week/Month cohorts
- ROAS & Cost2Dep progression over time
- Cohort heatmaps and trends

---

## üîç Filtering System

- AND logic between & within filter categories
- Global filter persistence across all tabs
- **Available Filters:**
  - Date range with mode selection (Registration vs FTD based)
  - Sub2 / Landing ID (multi-select from traffic data)
  - Source (multi-select, depends on Sub2 selection)
  - OS Family (Android, iOS, Windows, Other, Mac OS X, Chrome OS, Linux)
  - Currency (EUR - expandable)
  - Player Status (Prequalified, Duplicate, Self-excluded, Disabled)
- **Filter Presets:** Today, Last 7d, Last 30d, Last 90d, Custom range
- UTC timestamp handling

---

## üìà KPIs & Metrics

### Primary Metrics
- **FTD Count**: Total first-time depositors
- **CPA Cost**: Fixed payout √ó qualified FTD
- **NGR**: Net Gaming Revenue (Casino Real NGR)
- **Deposits & Cashouts**: Count and sum values

### Performance Metrics
- **Cost2Dep**: Deposits Sum / CPA Cost
- **ROAS**: (NGR / CPA Cost) √ó 100

### Behavioral Metrics
- **Avg Deposits per FTD**: Deposits Sum / FTD Count
- **Avg Deposit Amount**: Total Deposits / Deposit Count
- **Avg FTD Amount**: FTD Sum / FTD Count

### Quality Metrics
- **Approval Rate**: Prequalified / Total Players
- **Duplicate Rate**: Duplicates / Total Players

### Conversion Metrics (from Traffic data)
- **CR** (Click-to-Registration): registrations_count / unique_clicks √ó 100
- **CFTD** (Click-to-FTD): ftd_count / unique_clicks √ó 100  
- **CD** (Click-to-Deposit): deposits_count / unique_clicks √ó 100
- **RFTD** (Registration-to-FTD): ftd_count / registrations_count √ó 100

### Cohort Metrics
- Retention percentage by cohort periods
- Revenue progression (ROAS/Cost2Dep) over time

---

## üîÅ State Machines (FSM)

All interactive UI and async operations modeled via XState:
- Data fetching and processing states
- Filter application workflow
- Chart rendering pipeline
- Export generation flow
- Error handling and retry logic

**Sample State Structure:**
```typescript
type DataState =
  | { status: 'idle' }
  | { status: 'loading' }
  | { status: 'processing' }
  | { status: 'success'; data: ProcessedData }
  | { status: 'error'; error: Error };
```

---

## üì¶ Tech Stack Summary

| Layer            | Technology                         |
|------------------|------------------------------------|
| **Frontend**     | Next.js 15, React 19, TypeScript  |
| **State Mgmt**   | Zustand, XState                   |
| **UI Framework** | Shadcn UI, Shadcn Charts          |
| **Icons**        | Lucide React                       |
| **Data Layer**   | CSV Processing, React Query       |
| **Validation**   | Zod schemas                        |
| **Styling**      | Tailwind CSS, CSS Variables       |
| **Charts**       | Recharts (via Shadcn Charts)      |
| **Testing**      | Vitest, Playwright, Testing Library |
| **Quality**      | ESLint, Prettier, Husky           |
| **CI/CD**        | GitHub Actions (configurable)     |

---

## üöÄ Development Phases

### Phase 1: Foundation & Data Layer (Weeks 1‚Äì2)
- Next.js 15 + TypeScript project setup with complete testing infrastructure
- Shadcn UI integration and theming with component tests
- Data provider architecture with CSV processing and comprehensive test coverage
- Zod validation schemas for both datasets with validation tests
- Basic layout and navigation with E2E tests

### Phase 2: Filtering & Overview (Weeks 3‚Äì4)
- Global filter system implementation with state management tests
- Filter persistence across tabs with integration tests
- Overview tab with KPI cards and component testing
- Basic time-series chart with visual regression tests
- Data aggregation engine with performance tests

### Phase 3: Analytics & Conversions (Weeks 5‚Äì6)
- Analytics tab with breakdown tables and data accuracy tests
- Top performers analysis with calculation validation
- Conversions tab with funnel visualization and interaction tests
- Advanced chart components with accessibility tests
- Export functionality with file generation tests

### Phase 4: Cohorts & Polish (Weeks 7‚Äì8)
- Cohort analysis engine with complex calculation tests
- Cohort visualization (heatmaps) with performance tests
- Performance optimization with benchmark tests
- Mobile responsive design with device testing
- Final testing suite and production readiness validation

---

## üìä Success Criteria

| Type           | Metric                              |
|----------------|-------------------------------------|
| **Performance** | Page load <3s, Filter response <1s |
| **UX**         | Filter usage >80%, Export >30%     |
| **Technical**  | 99.9% uptime, TypeScript coverage  |
| **Mobile**     | Lighthouse score >90                |
| **Analytics**  | Average session >10 minutes        |
| **Quality**    | 80%+ test coverage, zero TS errors |

---

## üõ° Risk Mitigation

| Risk                        | Mitigation Strategy                    |
|-----------------------------|----------------------------------------|
| **Large CSV file performance** | Virtualized tables, progressive loading |
| **Data format inconsistencies** | Robust Zod schemas, fallback parsers |
| **Memory usage**               | Data chunking, efficient aggregation |
| **Mobile performance**         | Responsive design, lazy loading      |
| **State complexity**           | FSM pattern, clear state separation   |
| **Testing complexity**         | Automated test generation, clear patterns |
| **Code quality drift**         | Strict linting, pre-commit hooks     |

---

## üë• Target Personas

- **Performance Marketer**: Focused on Cost2Dep and ROAS optimization
- **Data Analyst**: Deep-dive into cohorts and conversion funnels  
- **Campaign Manager**: Overview dashboards and source performance
- **Executive**: High-level KPIs and trend analysis

---

## üîß Technical Requirements

### Data Processing
- Handle 2000+ player records efficiently
- Real-time metric calculations
- Cross-dataset joining and aggregation
- Memory-efficient data structures

### UI/UX Requirements
- Responsive design (mobile-first)
- Dark/light theme support
- Accessible components (WCAG 2.1)
- Intuitive filter interactions
- Fast chart rendering

### Integration Requirements
- Extensible data provider architecture
- Export capabilities (CSV, Excel)
- State persistence
- Error boundary implementation

### Quality Requirements
- Comprehensive test coverage (80%+)
- TypeScript strict mode compliance
- Performance benchmarks
- Cross-browser compatibility
- Mobile device testing

---

## üìà Current Project Status

### ‚úÖ Completed Tasks (Phase 1)
- **Task 1.1**: ‚úÖ Next.js 15 project initialization
- **Task 1.2**: ‚úÖ TypeScript configuration with strict mode
- **Task 1.3**: ‚úÖ ESLint setup with enhanced rules
- **Task 1.4**: ‚úÖ Prettier configuration for code formatting
- **Task 1.5**: ‚úÖ Environment variables setup with comprehensive structure
- **Task 1.9**: ‚úÖ Git semantic versioning with commitlint and husky

### üîÑ Current Priority Tasks
- **Task 1.7**: Vitest setup for unit and integration testing (NEXT)
- **Task 1.8**: Playwright setup for end-to-end testing
- **Task 1.6**: Build and deployment configuration
- **Task 1.10**: Quality gates workflow implementation

### üìä Progress Metrics
- **Overall Progress**: 24% subtask completion (6/25 subtasks done)
- **Phase 1 Progress**: ~50% complete
- **Testing Infrastructure**: Pending setup (high priority)
- **Quality Assurance**: Git hooks configured, testing tools needed

---

> ‚úÖ PRD enhanced with MCP-driven development workflow, comprehensive testing strategy, and current project status. Ready for Context7-informed task execution with mandatory quality gates and standardized reporting.
